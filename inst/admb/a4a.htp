#if !defined(_a4a_)
#  define _a4a_

class model_data : public ad_comm{
  data_vector ageRange;
  data_vector yearRange;
  data_int nsurveys;
  data_vector surveyMinAge;
  data_vector surveyMaxAge;
  data_vector surveyTimes;
  data_vector fbarRange;
  data_int isPlusGrp;
  data_int noobs;
  data_matrix obs;
  data_int noaux;
  data_matrix aux;
  int idx;
  int minYear;
  int maxYear;
  int minAge;
  int maxAge;
  data_int noFpar;
  data_int noExpandedF;
  data_matrix designF;
  data_int noQpar;
  data_int noExpandedQ;
  data_matrix designQ;
  data_int noVpar;
  data_int noExpandedV;
  data_matrix designV;
  data_int noNy1par;
  data_int noExpandedNy1;
  data_matrix designNy1;
  data_int noRpar;
  data_int noExpandedR;
  data_matrix designR;
  data_int Rmodel;
  data_number srCV;
  int SRaphase;
  int SRbphase;
  data_number spr0;
  data_int noRapar;
  data_int noExpandedRa;
  data_matrix designRa;
  data_int noRbpar;
  data_int noExpandedRb;
  data_matrix designRb;
  ofstream *   pad_NMCMCreport;
  ofstream *   pad_FMCMCreport;
  ofstream *   pad_QMCMCreport;
  ofstream *   pad_VMCMCreport;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_vector fpar;
  param_init_vector qpar;
  param_init_vector vpar;
  param_init_vector ny1par;
  param_init_vector rpar;
  param_init_vector rapar;
  param_init_vector rbpar;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value nll;
  param_vector expandedF;
  param_vector expandedQ;
  param_vector expandedV;
  param_vector expandedNy1;
  param_vector expandedR;
  param_vector expandedRa;
  param_vector expandedRb;
  param_matrix f;
  param_matrix m;
  param_matrix fspwn;
  param_matrix mspwn;
  param_matrix matWt;
  param_matrix stkWt;
  param_matrix logStkWt;
  param_matrix ctchWt;
  param_matrix logCtchWt;
  param_3array q;
  param_vector r;
  param_vector ra;
  param_vector rb;
  param_3array v;
  param_matrix n;
  param_vector pred;
  param_vector predvar;
  param_vector ssb;
  param_stddev_number ssbmaxYear;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);

};
#endif
